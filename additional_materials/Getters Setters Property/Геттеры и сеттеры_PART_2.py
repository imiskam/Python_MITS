class Example:

    def __init__(self, x, y, z):
        # задаем инициализатор  на получение
        # двух свойств x и y
        # указываем, что данные значения будут private
        self.__x = x
        self.__y = y
        self._z = z

    # геттер
    def get_value(self):
        return self.__x, self.__y

    # сеттер
    def set_value(self, new_x, new_y):
        if type(new_x) == int and type(new_y) == int:
            self.__x = new_x
            self.__y = new_y
        else:
            raise ValueError('X и Y могут быть только числами!')


ex = Example(1, 2, 3)
ex._z = 15
print(ex._z, ex.get_value())
ex.set_value(45, 54)
print(ex.get_value())

"""
Дополним наш предыдущий код двумя вышеуказанными методами.
В данном примере мы создали геттер и сеттер. 
---- Геттер - это методы, которые используются в объектно-ориентированном программировании (ООП) для доступа к 
частным атрибутам класса
---- Сеттер - это метод, который используется для установки значения свойства. В объектно-ориентированном 
программировании очень полезно устанавливать значение частных атрибутов в классе.
Простыми словами говоря, геттер-методы позволяют получить значения любых свойств нашего класса, в т.ч. тех, которые
защищены (Protected, Private), а сеттеры, позволяют изменить значения данных свойств.

Геттеры и сеттеры защищают значение переменной от неожиданных изменений. Когда переменная скрыта модификатором private и 
доступна только через геттер и сеттер, она инкапсулирована. Поэтому реализация геттеров и сеттеров является одним из 
способов обеспечения инкапсуляции в коде программы.
"""
