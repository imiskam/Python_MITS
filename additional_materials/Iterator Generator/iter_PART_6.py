"""
Теперь, давайте определим магический метод __iter__ для нашего класса Xrange
"""


class Xrange:
    def __init__(self, start=0.0, stop=0.0, step=0.0):
        self.start = start
        self.stop = stop
        self.step = step

    def __iter__(self):
        """
        Каждый раз, когда мы будем вызывать метод __iter__
        у нас self.value будет инициализироваться на начало арифметической прогрессии
        """
        self.value = self.start - self.step
        return self  # возвращается сам экземпляр класса

    def __next__(self):
        """
        По сути, определив метод __next__, мы указали способ образования
        новых значений.
        """
        if self.value + self.step < self.stop:
            self.value += self.step
            return self.value
        else:
            raise StopIteration


"""
Попробуем проверить
"""

example = Xrange(3, 6, 1)
for elem in example:
    print(elem)

"""
Данный пример на самом деле очень простой. В действительности мы можем использовать
инициализацию магических методов __next__ и __iter__ для перебора чего угодно, 
к примеру при наличии большого количества различных коллекций, мы можем указать поведение,
при котором перебор этих коллекций будет осуществляться в той последовательности и на тех условиях
которые мы укажем в наших методах.
"""
