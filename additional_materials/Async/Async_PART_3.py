import asyncio
import time


async def fun1(x):
    print(x ** 2)
    await asyncio.sleep(3) # ждем ответа от сервера
    print('fun1 завершена')


async def fun2(x):
    print(x ** 0.5)
    await asyncio.sleep(1)
    print('fun2 завершена')


print(time.strftime('%X'))

"""
Цикл событий является ядром каждого асинхронного приложения. Циклы событий запускают асинхронные задачи и обратные 
вызовы, выполняют сетевые операции ввода-вывода и запускают подпроцессы.
Разработчики приложений обычно должны использовать высокоуровневые асинхронные функции, такие как asyncio.run(), 
и редко должны ссылаться на объект цикла или вызывать его методы. Этот раздел предназначен в основном для авторов 
низкоуровневого кода, библиотек и фреймворков, которым требуется более точный контроль над поведением цикла обработки 
событий.

Для получения, установки или создания цикла событий можно использовать следующие низкоуровневые функции:
asyncio.get_running_loop()
"""
loop = asyncio.get_event_loop()
task1 = loop.create_task(fun1(4))
task2 = loop.create_task(fun2(4))
loop.run_until_complete(asyncio.wait([task1, task2]))

print(time.strftime('%X'))
