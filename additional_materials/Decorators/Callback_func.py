def callback_func(s):
    """
    Данная функция нужна нам для того, чтобы вывести длину текста
    """
    print(f'Длина текста в файле составляет: {s}')


def print_File_length(path, callback):
    """
    1. path - параметр для указания пути к файлу
    2. callback - параметр для передачи функции для вызова
    """
    # открываем файл Example.txt в режиме чтения под именем f
    with open('Example.txt', 'r') as f:
        # получаем количество символов и записываем в len_file
        len_file = len(f.read())
        # вызываем функцию, пришедшую в качестве аргумента
        callback(len_file)


if __name__ == '__main__':
    # вызываем нашу функцию print_File_length
    # в качестве первого аргумента подаем относительный путь к файлу
    # в качестве второго аргумента подаем функцию обратного вызова
    print_File_length("Example.txt", callback_func)
    # обращаем внимание на то, как подается функция в качестве аргумента
    # мы хотим использовать саму конструкцию функции, а не возвращаемое значение
    # поэтому не callback_func()

"""
Указанный способ очень прост и груб. Использование в таком явном виде
не лучший способ применения функций обратного вызова. В лучшем случае
необходимо использовать декоратор. Добавление синтаксического сахара
зачастую упрощает разработку.

Задача:
1. Дан список [ [1,2,3], [4, 5, 6], [7, 8, 9] ]
2. Напишите функцию, которая возвращает новый список, состоящий из
значений кратных 3.
3. Напишите декоратор, который будет возвращать количество значений, 
не кратных 3 из вашей функции.  
"""
